openapi: 3.0.0
info:
  title: ASM Bots API
  description: |
    API documentation for the ASM Bots platform, a web-based Core Wars arena with
    real-time memory visualization, battle simulation, and global leaderboards.
  version: 1.0.0
  contact:
    name: ASM Bots Support
    url: https://github.com/pedramamini/asm-bots

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.asm-bots.example.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Bots
    description: Bot management and operations
  - name: Battles
    description: Battle creation and management
  - name: Leaderboard
    description: Rankings and statistics

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username or email already exists

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/bots:
    get:
      tags:
        - Bots
      summary: List all bots
      security:
        - BearerAuth: []
      parameters:
        - name: owner
          in: query
          schema:
            type: string
          description: Filter bots by owner ID
      responses:
        '200':
          description: List of bots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Bots
      summary: Create new bot
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotCreate'
      responses:
        '201':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/battles:
    post:
      tags:
        - Battles
      summary: Create new battle
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleCreate'
      responses:
        '201':
          description: Battle created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/leaderboard:
    get:
      tags:
        - Leaderboard
      summary: Get global leaderboard
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
          description: Number of entries to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of entries to skip
      responses:
        '200':
          description: Leaderboard entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankingScore'

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        token:
          type: string
        expires:
          type: string
          format: date-time

    Bot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        code:
          type: string
        owner:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    BotCreate:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        code:
          type: string

    Battle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bots:
          type: array
          items:
            type: string
            format: uuid
        status:
          type: string
          enum: [pending, running, completed]
        winner:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        events:
          type: array
          items:
            $ref: '#/components/schemas/BattleEvent'

    BattleCreate:
      type: object
      required:
        - bots
      properties:
        bots:
          type: array
          items:
            type: string
            format: uuid
          minItems: 2
          maxItems: 2

    BattleEvent:
      type: object
      properties:
        timestamp:
          type: integer
        type:
          type: string
          enum: [instruction, memory, status]
        botId:
          type: string
          format: uuid
        data:
          type: object

    RankingScore:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        username:
          type: string
        totalBattles:
          type: integer
        wins:
          type: integer
        losses:
          type: integer
        winRate:
          type: number
          format: float
        score:
          type: integer

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT